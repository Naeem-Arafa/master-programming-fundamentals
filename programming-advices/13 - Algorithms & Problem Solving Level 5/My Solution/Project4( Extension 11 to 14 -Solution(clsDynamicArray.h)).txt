#pragma once
#include <iostream>
using namespace std;

template <class T>
class clsDynamicArray
{
protected:
    int _Size = 0;
    T* _TempArray;

public:
    T* OriginalArray;

    clsDynamicArray(int Size = 0)
    {
        if (Size < 0)
            Size = 0;

        _Size = Size;
        OriginalArray = new T[_Size];
    }

    ~clsDynamicArray()
    {
        delete[]  OriginalArray;
    }

    bool SetItem(int index, T Value)
    {
        if (index >= _Size || _Size < 0)
        {
            return false;
        }

        OriginalArray[index] = Value;
        return true;
    }

    int Size()
    {
        return _Size;
    }

    bool IsEmpty()
    {
        return (_Size == 0 ? true : false);
    }

    void PrintList()
    {
        for (int i = 0; i <= _Size - 1; i++)
        {
            cout << OriginalArray[i] << " ";
        }

        cout << "\n";
    }

    void Resize(int NewSize)
    {
        if (NewSize == _Size)
            return;

        if (NewSize < 0)
            NewSize = 0;

        if (NewSize < _Size)
            _Size = NewSize;

        _TempArray = new T[NewSize];

        for (int i = 0; i < _Size; i++)
        {
            _TempArray[i] = OriginalArray[i];
        }
        
        _Size = NewSize;

        delete[] OriginalArray;
        OriginalArray = _TempArray;
    }

    T GetItem(int Index)
    {
        if (Index >= _Size || Index < 0)
            return 0;

        return OriginalArray[Index];
    }

    void Reverse()
    {
        _TempArray = new T[_Size];
        int TempSize = _Size - 1;
        for (int i = 0; i < _Size; i++)
        {
            _TempArray[i] = OriginalArray[TempSize];
            TempSize--;
        }

        delete[] OriginalArray;
        OriginalArray = _TempArray;
    }

    void Clear()
    {
        _Size = 0;
        _TempArray = NULL;
        delete[] OriginalArray;
        OriginalArray = _TempArray;
    }

    bool DeleteItemAt(int Index)
    {
        if (Index >= _Size || Index < 0)
        {
            return false;
        }
        _Size--;
        _TempArray = new T[_Size];
        int TempSize = 0;
        for (int i = 0; i < _Size+1; i++)
        {
            if (i == Index)
                continue;

            _TempArray[TempSize] = OriginalArray[i];
            TempSize++;
        }
        delete[] OriginalArray;
        OriginalArray = _TempArray;
        return true;
    }

    void DeleteFirstItem()
    {
        DeleteItemAt(0);
    }

    void DeleteLastItem()
    {
        DeleteItemAt(_Size - 1);
    }

    int Find(T Value)
    {
        for (int i = 0; i < _Size; i++)
        {
            if (OriginalArray[i] == Value)
                return i;
        }
        return -1;
    }

    bool DeleteItem(T Value) 
    {
        return DeleteItemAt(Find(Value));
    }

    bool InsertAt(int Index, T Value)
    {
        if (Index > _Size || Index < 0)
        {
            return false;
        }
        _Size++;
        _TempArray = new T[_Size];
        int TempSize = 0;
        for (int i = 0; i < _Size; i++)
        {
            if (i == Index)
            {
                _TempArray[i] = Value;
                continue;
            }
                
            _TempArray[i] = OriginalArray[TempSize];
            TempSize++;
        }
        delete[] OriginalArray;
        OriginalArray = _TempArray;
        return true;
    }

    void InsertAtBeginning(T value)
    {
        InsertAt(0, value);
    }

    bool InsertBefore(int index, T value)
    {
        if (index < 1)
            return InsertAt(0, value);
        else
            return InsertAt(index - 1, value);
    }

    bool InsertAfter(int index, T value)
    {
        if (index >= _Size)
            return InsertAt(_Size, value);
        else
            return InsertAt(index + 1, value);
    }

    bool InsertAtEnd(T value)
    {
        return InsertAt(_Size, value);
    }

};
